#     test$x=rnorm(100)
#     test$y=rep(c(0,1),c(50,50))
#     test$x[test$y==1]=test$x[test$y==1]+ifelse(runif(1)>0.5,0,1)
#
#     test[1:(testN/2),1]=rnorm(testN/2)
#     test[1:(testN/2),2]=0
#     test[(testN/2+1):testN,1]=rnorm(testN/2)+ifelse(runif(1)>0.5,0,1)
#     test[(testN/2+1):testN,2]=1
#     train[1:(N/2),]=class0[sample(nrow(class0), N/2,replace=TRUE),]
#     train[(N/2+1):N,]=class1[sample(nrow(class1), N/2,replace=TRUE),]
#     test[1:(testN/2),]=class0[sample(nrow(class0), testN/2,replace=TRUE), ]
#     test[(testN/2+1):testN,]=class1[sample(nrow(class1), testN/2,replace=TRUE), ]
#     train$y<-as.factor(train$y)
#     test$y<-as.factor(test$y)
svmfit=svm(y~x,data=train)
svm.pred = predict(svmfit, newdata = test)
#     svm.pred[svm.probs>.5]=1
error.rate<-mean(svm.pred!=test$y)
#print (error.rate)
})
mean(error.rates)
sd(error.rates)
hist(error.rates)
numTrials<-1000
N=1000
testN=1000
library(e1071)
error.rates<-replicate(numTrials,{
x0=matrix(rnorm(500),50,10)
x1=matrix(rnorm(500),50,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(50,50))
train=data.frame(x,y=as.factor(y))
names(train)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
x0=matrix(rnorm(500),50,10)
x1=matrix(rnorm(500),50,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(50,50))
test=data.frame(x,y=as.factor(y))
names(test)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
#
#     train<-data.frame(rep(0,N),rep(0,N))
#     names(train)<-c("x","y")
#     test<-data.frame(rep(0,testN),rep(0,testN))
#     names(test)<-c("x","y")
#     svm.pred=rep(0,testN)
#     x0<-rnorm(ns)
#     x1<-rnorm(ns)
#     x1[1:(ns/2)]<-x1[1:(ns/2)]+1
#     #x1=rbind(matrix(rnorm(5,1,1),5,1),matrix(rnorm(5,0,1),5,1))
#     class0<-cbind(x0,y0)
#     class1<-cbind(x1,y1)
#     train$x=rnorm(100)
#     train$y=rep(c(0,1),c(50,50))
#     train$x[train$y==1]=train$x[train$y==1]+ifelse(runif(1)>0.5,0,1)
#
#     test$x=rnorm(100)
#     test$y=rep(c(0,1),c(50,50))
#     test$x[test$y==1]=test$x[test$y==1]+ifelse(runif(1)>0.5,0,1)
#
#     test[1:(testN/2),1]=rnorm(testN/2)
#     test[1:(testN/2),2]=0
#     test[(testN/2+1):testN,1]=rnorm(testN/2)+ifelse(runif(1)>0.5,0,1)
#     test[(testN/2+1):testN,2]=1
#     train[1:(N/2),]=class0[sample(nrow(class0), N/2,replace=TRUE),]
#     train[(N/2+1):N,]=class1[sample(nrow(class1), N/2,replace=TRUE),]
#     test[1:(testN/2),]=class0[sample(nrow(class0), testN/2,replace=TRUE), ]
#     test[(testN/2+1):testN,]=class1[sample(nrow(class1), testN/2,replace=TRUE), ]
#     train$y<-as.factor(train$y)
#     test$y<-as.factor(test$y)
svmfit=svm(y~.,data=train)
svm.pred = predict(svmfit, newdata = test)
#     svm.pred[svm.probs>.5]=1
error.rate<-mean(svm.pred!=test$y)
#print (error.rate)
})
mean(error.rates)
sd(error.rates)
hist(error.rates)
# now try with linear kernel
numTrials<-1
N=1000
testN=1000
library(e1071)
error.rates<-replicate(numTrials,{
train<-data.frame(rep(0,N),rep(0,N))
names(train)<-c("x","y")
test<-data.frame(rep(0,testN),rep(0,testN))
names(test)<-c("x","y")
svm.pred=integer(testN)
x0=matrix(rnorm(10),10,1)
x1=rbind(matrix(rnorm(5,1,1),5,1),matrix(rnorm(5,0,1),5,1))
class0<-cbind(x0,y0)
class1<-cbind(x1,y1)
train[1:(N/2),]=class0[sample(nrow(class0), N/2,replace=TRUE), ]
train[(N/2+1):N,]=class1[sample(nrow(class1), N/2,replace=TRUE), ]
x0=matrix(rnorm(10),10,1)
x1=rbind(matrix(rnorm(5,1,1),5,1),matrix(rnorm(5,0,1),5,1))
class0<-cbind(x0,y0)
class1<-cbind(x1,y1)
test[1:(testN/2),]=class0[sample(nrow(class0), testN/2,replace=TRUE), ]
test[(testN/2+1):testN,]=class1[sample(nrow(class1), testN/2,replace=TRUE), ]
train$y<-as.factor(train$y)
test$y<-as.factor(test$y)
svm.fit=svm(y~x,data=train,kernel="linear")
svm.pred = predict(svm.fit, newdata = test)
error.rate<-sum(svm.pred!=test[,2])/nrow(test)
#print (error.rate)
})
mean(error.rates)
sd(error.rates)
hist(error.rates)
summary(error.rates)
table(error.rates)
numTrials<-1000
N=1000
testN=1000
library(e1071)
error.rates<-replicate(numTrials,{
x0=matrix(rnorm(500),50,10)
x1=matrix(rnorm(500),50,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(50,50))
train=data.frame(x,y=as.factor(y))
names(train)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
x0=matrix(rnorm(500),50,10)
x1=matrix(rnorm(500),50,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(50,50))
test=data.frame(x,y=as.factor(y))
names(test)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
#
#     train<-data.frame(rep(0,N),rep(0,N))
#     names(train)<-c("x","y")
#     test<-data.frame(rep(0,testN),rep(0,testN))
#     names(test)<-c("x","y")
#     svm.pred=rep(0,testN)
#     x0<-rnorm(ns)
#     x1<-rnorm(ns)
#     x1[1:(ns/2)]<-x1[1:(ns/2)]+1
#     #x1=rbind(matrix(rnorm(5,1,1),5,1),matrix(rnorm(5,0,1),5,1))
#     class0<-cbind(x0,y0)
#     class1<-cbind(x1,y1)
#     train$x=rnorm(100)
#     train$y=rep(c(0,1),c(50,50))
#     train$x[train$y==1]=train$x[train$y==1]+ifelse(runif(1)>0.5,0,1)
#
#     test$x=rnorm(100)
#     test$y=rep(c(0,1),c(50,50))
#     test$x[test$y==1]=test$x[test$y==1]+ifelse(runif(1)>0.5,0,1)
#
#     test[1:(testN/2),1]=rnorm(testN/2)
#     test[1:(testN/2),2]=0
#     test[(testN/2+1):testN,1]=rnorm(testN/2)+ifelse(runif(1)>0.5,0,1)
#     test[(testN/2+1):testN,2]=1
#     train[1:(N/2),]=class0[sample(nrow(class0), N/2,replace=TRUE),]
#     train[(N/2+1):N,]=class1[sample(nrow(class1), N/2,replace=TRUE),]
#     test[1:(testN/2),]=class0[sample(nrow(class0), testN/2,replace=TRUE), ]
#     test[(testN/2+1):testN,]=class1[sample(nrow(class1), testN/2,replace=TRUE), ]
#     train$y<-as.factor(train$y)
#     test$y<-as.factor(test$y)
svmfit=svm(y~.,data=train)
svm.pred = predict(svmfit, newdata = test)
#     svm.pred[svm.probs>.5]=1
error.rate<-mean(svm.pred!=test$y)
#print (error.rate)
})
mean(error.rates)
sd(error.rates)
hist(error.rates)
numTrials<-1000
testN=1000
library(e1071)
error.rates<-replicate(numTrials,{
x0=matrix(rnorm(500),50,10)
x1=matrix(rnorm(500),50,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(50,50))
train=data.frame(x,y=as.factor(y))
names(train)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
x0=matrix(rnorm(5*testN),testN/2,10)
x1=matrix(rnorm(5*testN),testN/2,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(testN/2,testN/2))
test=data.frame(x,y=as.factor(y))
names(test)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
svmfit=svm(y~.,data=train)
svm.pred = predict(svmfit, newdata = test)
#     svm.pred[svm.probs>.5]=1
error.rate<-mean(svm.pred!=test$y)
#print (error.rate)
})
mean(error.rates)
sd(error.rates)
hist(error.rates)
numTrials<-1000
testN=1000
library(e1071)
error.rates<-replicate(numTrials,{
x0=matrix(rnorm(500),50,10)
x1=matrix(rnorm(500),50,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(50,50))
train=data.frame(x,y=as.factor(y))
names(train)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
x0=matrix(rnorm(5*testN),testN/2,10)
x1=matrix(rnorm(5*testN),testN/2,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(testN/2,testN/2))
test=data.frame(x,y=as.factor(y))
names(test)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
svmfit=svm(y~.,data=train)
svm.pred = predict(svmfit, newdata = test,kernal="linear")
error.rate<-mean(svm.pred!=test$y)
})
# now try with linear kernel
numTrials<-1000
testN=1000
library(e1071)
error.rates<-replicate(numTrials,{
x0=matrix(rnorm(500),50,10)
x1=matrix(rnorm(500),50,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(50,50))
train=data.frame(x,y=as.factor(y))
names(train)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
x0=matrix(rnorm(5*testN),testN/2,10)
x1=matrix(rnorm(5*testN),testN/2,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(testN/2,testN/2))
test=data.frame(x,y=as.factor(y))
names(test)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
svmfit=svm(y~.,data=train)
svm.pred = predict(svmfit, newdata = test,kernel="linear")
error.rate<-mean(svm.pred!=test$y)
})
mean(error.rates)
sd(error.rates)
hist(error.rates)
# now try with linear kernel
numTrials<-1000
testN=1000
library(e1071)
error.rates<-replicate(numTrials,{
x0=matrix(rnorm(500),50,10)
x1=matrix(rnorm(500),50,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(50,50))
train=data.frame(x,y=as.factor(y))
names(train)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
x0=matrix(rnorm(5*testN),testN/2,10)
x1=matrix(rnorm(5*testN),testN/2,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(testN/2,testN/2))
test=data.frame(x,y=as.factor(y))
names(test)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
svmfit=svm(y~.,data=train,kernel="linear")
svm.pred = predict(svmfit, newdata = test)
error.rate<-mean(svm.pred!=test$y)
})
mean(error.rates)
sd(error.rates)
hist(error.rates)
rm(list=ls())
# now try with linear kernel
numTrials<-1000
testN=1000
library(e1071)
error.rates<-replicate(numTrials,{
x0=matrix(rnorm(500),50,10)
x1=matrix(rnorm(500),50,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(50,50))
train=data.frame(x,y=as.factor(y))
names(train)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
x0=matrix(rnorm(5*testN),testN/2,10)
x1=matrix(rnorm(5*testN),testN/2,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(testN/2,testN/2))
test=data.frame(x,y=as.factor(y))
names(test)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
svmfit=svm(y~.,data=train,kernel="linear")
svm.pred = predict(svmfit, newdata = test)
error.rate<-mean(svm.pred!=test$y)
})
mean(error.rates)
sd(error.rates)
hist(error.rates)
# now try with logistic regression
numTrials<-1000
testN=1000
library(e1071)
error.rates<-replicate(numTrials,{
x0=matrix(rnorm(500),50,10)
x1=matrix(rnorm(500),50,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(50,50))
train=data.frame(x,y=as.factor(y))
names(train)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
x0=matrix(rnorm(5*testN),testN/2,10)
x1=matrix(rnorm(5*testN),testN/2,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(testN/2,testN/2))
test=data.frame(x,y=as.factor(y))
names(test)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
glm.fit=glm(y~x,data=train,family=binomial)
glm.probs = predict(glm.fit, newdata = test,type="response")
glm.pred=rep(0,testN)
glm.pred[glm.probs>.5]=1
error.rate<-mean(glm.pred!=test$y)
#print (error.rate)
})
mean(error.rates)
sd(error.rates)
hist(error.rates)
# now try with logistic regression
numTrials<-1000
testN=1000
library(e1071)
error.rates<-replicate(numTrials,{
x0=matrix(rnorm(500),50,10)
x1=matrix(rnorm(500),50,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(50,50))
train=data.frame(x,y=as.factor(y))
names(train)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
x0=matrix(rnorm(5*testN),testN/2,10)
x1=matrix(rnorm(5*testN),testN/2,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(testN/2,testN/2))
test=data.frame(x,y=as.factor(y))
names(test)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
glm.fit=glm(y~.,data=train,family=binomial)
glm.probs = predict(glm.fit, newdata = test,type="response")
glm.pred=rep(0,testN)
glm.pred[glm.probs>.5]=1
error.rate<-mean(glm.pred!=test$y)
#print (error.rate)
})
mean(error.rates)
sd(error.rates)
hist(error.rates)
# now try with linear kernel
numTrials<-1000
testN=1000
library(e1071)
error.rates<-replicate(numTrials,{
x0=matrix(rnorm(500),50,10)
x1=matrix(rnorm(500),50,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(50,50))
train=data.frame(x,y=as.factor(y))
names(train)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
x0=matrix(rnorm(5*testN),testN/2,10)
x1=matrix(rnorm(5*testN),testN/2,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(testN/2,testN/2))
test=data.frame(x,y=as.factor(y))
names(test)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
svmfit=svm(y~.,data=train,kernel="linear",scale=FALSE)
svm.pred = predict(svmfit, newdata = test)
error.rate<-mean(svm.pred!=test$y)
})
mean(error.rates)
sd(error.rates)
hist(error.rates)
# now try with linear kernel
numTrials<-1000
testN=1000
library(e1071)
error.rates<-replicate(numTrials,{
x0=matrix(rnorm(500),50,10)
x1=matrix(rnorm(500),50,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(50,50))
train=data.frame(x,y=as.factor(y))
names(train)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
x0=matrix(rnorm(5*testN),testN/2,10)
x1=matrix(rnorm(5*testN),testN/2,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(testN/2,testN/2))
test=data.frame(x,y=as.factor(y))
names(test)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
svmfit=svm(y~.,data=train,kernel="linear",scale=FALSE,cost=10)
svm.pred = predict(svmfit, newdata = test)
error.rate<-mean(svm.pred!=test$y)
})
mean(error.rates)
sd(error.rates)
hist(error.rates)
# now try with logistic regression
numTrials<-1000
testN=1000
library(e1071)
error.rates<-replicate(numTrials,{
x0=matrix(rnorm(500),50,10)
x1=matrix(rnorm(500),50,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(50,50))
train=data.frame(x,y=as.factor(y))
names(train)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
x0=matrix(rnorm(5*testN),testN/2,10)
x1=matrix(rnorm(5*testN),testN/2,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(testN/2,testN/2))
test=data.frame(x,y=as.factor(y))
names(test)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
glm.fit=glm(y~.,data=train,family=binomial)
glm.probs = predict(glm.fit, newdata = test,type="response")
glm.pred=rep(0,testN)
glm.pred[glm.probs>.5]=1
error.rate<-mean(glm.pred!=test$y)
#print (error.rate)
})
mean(error.rates)
sd(error.rates)
hist(error.rates)
warnings()
x0=matrix(rnorm(500),50,10)
x1=matrix(rnorm(500),50,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(50,50))
train=data.frame(x,y=as.factor(y))
names(train)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
x0=matrix(rnorm(5*testN),testN/2,10)
x1=matrix(rnorm(5*testN),testN/2,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(testN/2,testN/2))
test=data.frame(x,y=as.factor(y))
names(test)<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
svmfit=svm(y~.,data=train)
svm.pred = predict(svmfit, newdata = test)
error.rate<-mean(svm.pred!=test$y)
svmfit
plot(svmfit,test)
numTrials<-1000
testN=1000
library(e1071)
dfnames<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
numTrials<-1000
testN=1000
library(e1071)
dfnames<-c("x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","y")
# svm with default settings
error.rates<-replicate(numTrials,{
x0=matrix(rnorm(500),50,10)
x1=matrix(rnorm(500),50,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(50,50))
train=data.frame(x,y=as.factor(y))
names(train)<-dfnames
x0=matrix(rnorm(5*testN),testN/2,10)
x1=matrix(rnorm(5*testN),testN/2,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(testN/2,testN/2))
test=data.frame(x,y=as.factor(y))
names(test)<-dfnames
#svm default settings
svmfit=svm(y~.,data=train)
svm.pred = predict(svmfit, newdata = test)
error.rate<-mean(svm.pred!=test$y)
#     # svm linear kernel
#     svmfit=svm(y~.,data=train,kernel="linear",scale=FALSE,cost=10)
#     svm.pred = predict(svmfit, newdata = test)
#     error.rate<-mean(svm.pred!=test$y)
#
#     # logistic regression
#     glm.fit=glm(y~.,data=train,family=binomial)
#     glm.probs = predict(glm.fit, newdata = test,type="response")
#     glm.pred=rep(0,testN)
#     glm.pred[glm.probs>.5]=1
})
mean(error.rates)
sd(error.rates)
hist(error.rates)
x0=matrix(rnorm(5*testN),testN/2,10)
x1=matrix(rnorm(5*testN),testN/2,10)
x1[,1:5]<-x1[,1:5]+1
x<-rbind(x0,x1)
y=rep(c(0,1),c(testN/2,testN/2))
test=data.frame(x,y=as.factor(y))
names(test)<-dfnames
plot(test)
plot(test$x1,test$y)
