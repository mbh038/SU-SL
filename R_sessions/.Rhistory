nc<-ncbirths
gained_clean = na.omit(nc$gained)
n = length(gained_clean)
?rep
hist(boot_means)
boot_means = rep(NA, 100)
for(i in 1:100){
boot_sample = sample(gained_clean, n, replace = TRUE)
boot_means[i] = mean(boot_sample)
}
hist(boot_means)
load(url("http://bit.ly/dasi_nc"))
qnorm(0.8)
pt(1.91,10,lower.tail=FALSE)
pt(3.45,16,lower.tail=TRUE)
pt(-3.45,16,lower.tail=TRUE)
pt(.83,6,lower.tail=FALSE)*2
pt(-.83, df = 6, lower.tail = TRUE) *2
pnorm(-1.657,lower.tail=TRUE)
pnorm(-1.657,lower.tail=TRUE)*2
2.7e7
2.7e7/(400^3)
library("ggplot2", lib.loc="~/R/win-library/3.2")
library("ggplot2", lib.loc="~/R/win-library/3.2")
remove.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
remove.packages("ggplot2)")
install.packages("ggplot2")
library(ggplot2)
install.packages("dplyr")
library(dplyr)
install.packages("lubridate")
library(lubridate)
install.packages("caret")
library(caret)
names(cars)
str(cars)
mean(cars[,2])
summary(cars)
?which
which(cars$dist==85)
cars
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/mice_pheno.csv"
filename <- basename(url)
download(url, destfile=filename)
dat <- na.omit( read.csv(filename) )
str(dat)
str(dat)
pnorm(1)-pnorm(-1)
pnorm(2)-pnorm(-2)
pnorm(3)-pnorm(-3)
y<-dat %>% filter(Diet=="chow" & Sex=="M") %>% select(Bodyweight) %>% unlist()
m<=(mean(y)+popsd(y))
y<-dat %>% filter(Diet=="chow" & Sex=="M") %>% select(Bodyweight) %>% unlist()
mean(y<=(mean(y)+popsd(y)))
y<-dat %>% filter(Diet=="chow" & Sex=="M") %>% select(Bodyweight) %>% unlist()
library(dplyr)
y<-dat %>% filter(Diet=="chow" & Sex=="M") %>% select(Bodyweight) %>% unlist()
mean(y<=(mean(y)+popsd(y)))
library(rafa)
library(rafalib)
install.packages("rafalib")
library(dplyr)
library(rafalib)
y<-dat %>% filter(Diet=="chow" & Sex=="M") %>% select(Bodyweight) %>% unlist()
mean(y<=(mean(y)+popsd(y)))
mean(y<=(mean(y)+popsd(y)))-mean(y<=(mean(y)-popsd(y)))
z <- ( y - mean(y) ) / popsd(y)
mean( abs(z) <=1 )
mean( abs(z) <=1 )
mean( abs(z) <=2 )
mean( abs(z) <=3 )
qqnorm(z)
abline(0,1)
mypar(2,2)
y <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
y <- filter(dat, Sex=="F" & Diet=="chow") %>% select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
y <- filter(dat, Sex=="M" & Diet=="hf") %>% select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
y <- filter(dat, Sex=="F" & Diet=="hf") %>% select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
str(y)
?replicate
replicate(10000,sample(y,25))
a<-replicate(10000,sample(y,25))
str(a)
a[,1]
a<-replicate(10000,mean(sample(y,25))
set.seed(1)
a<-replicate(10000,mean(sample(y,25)))
str(a)
set.seed(1)
y<-replicate(10000,mean(sample(y,25)))
hist(y)
mpar(1,1)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
set.seed(1)
y<-replicate(10000,mean(sample(y,25)))
hist(y)
mypar(1,1)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
set.seed(1)
y<-replicate(10000,mean(sample(y,25)))
hist(y)
mypar(1,2)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
set.seed(1)
y<-replicate(10000,mean(sample(y,25)))
mypar(1,2)
hist(y)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
set.seed(1)
y<-replicate(10000,mean(sample(y,25)))
mypar(2,2)
hist(y)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
set.seed(1)
avgs <- replicate(10000, mean( sample(y, 25)))
mypar(1,2)
hist(avgs)
qqnorm(avgs)
qqline(avgs)
y <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
set.seed(1)
z<-replicate(10000,mean(sample(y,25)))
mypar(2,2)
hist(z)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
#..or
set.seed(1)
avgs <- replicate(10000, mean( sample(y, 25)))
mypar(2,2)
hist(avgs)
qqnorm(avgs)
qqline(avgs)
y <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
set.seed(1)
z<-replicate(10000,mean(sample(y,25)))
mypar(2,2)
hist(z)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
#..or
set.seed(1)
avgs <- replicate(10000, mean( sample(y, 25)))
#mypar(2,2)
hist(avgs)
qqnorm(avgs)
qqline(avgs)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/babies.txt"
filename <- basename(url)
download(url, destfile=filename)
babies <- read.table("babies.txt", header=TRUE)
bwt.nonsmoke <- filter(babies, smoke==0) %>% select(bwt) %>% unlist
bwt.smoke <- filter(babies, smoke==1) %>% select(bwt) %>% unlist
library(downloader)
library(dplyr)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/babies.txt"
filename <- basename(url)
download(url, destfile=filename)
babies <- read.table("babies.txt", header=TRUE)
bwt.nonsmoke <- filter(babies, smoke==0) %>% select(bwt) %>% unlist
bwt.smoke <- filter(babies, smoke==1) %>% select(bwt) %>% unlist
?shuffle
library(raflab)
library(rafalab)
install.packages("rafalib")
library(rafalab)
library(rafalib)
?shuffle
?shuffle()
(.95)^20
.95*.02
.02*.05
.98*.03
.97*.98
.9506+.0294+.001+.019
.0294/(.0294+.019)
pnorm(.975)
pnorm(1.96)
pnorm(1,sd=2)
qnorm(.8)
pnorm(.84)
19.6/4.16
4.711^2
10/sqrt(23)
2.085144*1.96
5-4.086882
pnorm(.913118,sd=2.085144)
pnorm(.913118)
qnorm(.8)
(19.6/2.16)^2
10/sqrt(83)
1.0976*1.96
pnorm(.85)
library(UsingR)
data("father.son",package="UsingR")
mean(father.son$sheight)
str(father.son)
library(dplyr)
father.son %>%
filter(round(fheight,0)==71) %>%
mean(sheight)
summary(father.son)
father.son %>%
filter(round(fheight,0)==71) %>%
mean(sheight,na.rm=TRUE)
library(dplyr)
father.son %>%
filter(round(fheight,0)==71)
father.son %>%
filter(round(fheight,0)==71) %>%
mean(sheight)
library(dplyr)
father.son %>%
filter(round(fheight,0)==71) %>%
mean(father.son$sheight)
?mean
library(dplyr)
father.son %>%
filter(round(fheight,0)==71) %>%
max(sheight)
ibrary(dplyr)
fH71<-father.son %>%
filter(round(fheight,0)==71) %>%
mean(fH71$sheight)
summary(fH71)
library(dplyr)
fH71<-father.son %>%
filter(fheight>71)
mean(fH71$sheight)
library(dplyr)
fH71<-father.son %>%
filter(round(fheight,0)==71)
mean(fH71$sheight)
library(dplyr)
fH71<-father.son %>%
filter(round(fheight,0)==71) %>%
mean(sheight)
library(dplyr)
fH71<-father.son %>%
filter(round(fheight,0)==71) %>%
mean(fH71$sheight)
fH71<-father.son %>%
filter(round(fheight,0)==71) %>%
mean(fH71$sheight)
fH71<-father.son %>%
filter(round(fheight,0)==71)
mean(fH71$sheight)
library(dplyr)
fH71<-father.son %>%
filter(round(fheight,0)==71) %>%
summarize(mean(sheight))
father.son %>%
filter(round(fheight,0)==71) %>%
summarize(mean(sheight))
x1=seq(1,10,1)
X=cbind(x1,2*x1,3*x1,4*x1,5*x1)
sum(X[7,])
x1=1:10
X=cbind(x1,2*x1,3*x1,4*x1,5*x1)
sum(X[7,])
matrix(1:60,20,3)
matrix(1:60,20,3,byrow=TRUE)
?%8%
?%*%
X=matrix(100,20,5)
X
X=matrix(seq(1,100),20,5)
X=matrix(seq(1,100),20,5)
X
X %*% matrix(1,ncol(X) )
X%*%diag(ncol(X))
diag(ncol(X))
diag(X)
?diag
X
diag(X)
diag(ncol(X))
diag(5)
X = cbind(rep(1,nx + ny),rep(c(0,1),c(nx, ny)))
nx<-5
ny<-7
X = cbind(rep(1,nx + ny),rep(c(0,1),c(nx, ny)))
X
crossprod(X)
XtX = t(X) %*% X
XtX[ 1,1 ]
XtX
library(devtools)
install_github("genomicsclass/GSE5859Subset")
library(GSE5859Subset)
data(GSE5859Subset) ##this loads the three tables
head(sampleInfo)
theDate="2005-06-27"
thisDate<-sampleInfo[sampleInfo[,2]==theDate,]
nrow(thisDate)
thisDate
theDate="2005-06-27"
thisDate<-sampleInfo[sampleInfo$date==theDate,]
nrow(thisDate)
sum(sampleInfo$date=="2005-06-27")
library(MASS)
library(ISLR)
regplot=function(x,y){
fit=lm(y~x)
plot(x,y)
abline(fit,col="red")
}
attach(Carseats)
regplot(Price,Sales)
regplot=function(x,y,...){
fit=lm(y~x)
plot(x,y,...)
abline(fit,col="red")
}
regplot(Price,Sales,xlab="Price",ylab="Sales",col="blue",pch=20)
0.014/0.986
7.5*.014
library(ISLR)
data(Autos)
data(Auto)
str(Auto)
fit<-m(mpg~., data = Auto);summary(fit)
fit<-(mpg~., data = Auto)
fit<-lm(mpg~., data = Auto)
summary(fit)
fit<-lm(mpg~.-name, data = Auto)
summary(fit)
table(Auto$name)
length(unique(Auto$name))
lengtgh(Auto$name)
length(Auto$name)
autoAll = lm(mpg~.-name, data = Auto)
summary(autoAll)
setwd("C:/Users/Mike/Rspace/SU-SL/R_sessions")
source('C:/Users/Mike/Rspace/SU-SL/R_sessions/ch5_Rquiz.R', echo=TRUE)
library(boot)
library(ISLR)
library(car)
library(boot)
load ("./data/5.R.RData")
attach(Xy)
lfit<-lm(y~X1+X2,data=Xy)
lfit
summary(lfit)
summary(lm(y~.,data=Xy)) # model answer
matplot(Xy,type="l")
library(scatterplot3d)
scatterplot3d(X1,X2,y[1:1000],type="l",color ="blue")
# plots show great deal of autocorrelation, so error estimates of betas in lfit
# likely to be too small.
# There is very strong autocorrelation between consecutive rows of the data matrix.
# Roughly speaking, we have about 10-20 repeats of every data point, so the sample
# size is in effect much smaller than the number of rows (1000 in this case).
lfitBeta1=function(df){
lfit<-lm(df[,3]~df[,1]+df[,2],data=df)
lfit$coefficients[2]
}
lfitBeta1.fn=function(data, index){
lfitBeta1(data[index,])
}
boot.out=boot(Xy,lfitBeta1.fn,R=10000)
boot.out
plot(boot.out)
system.time(
{
ns<-c(1,101,201,301,401,501,601,701,801,901)
lfitBeta1.fn=function(data,ns){
newBlock<-sample(ns,10,replace=TRUE)
newRows<-vector(mode="numeric", length=0)
for (i in 1:10){
nex100=seq(from=newBlock[i],to=newBlock[i]+99,by=1)
newRows<-c(newRows,nex100)
}
lfitBeta1(data[newRows,])
}
boot.out=boot(Xy,lfitBeta1.fn,R=10000)
boot.out
plot(boot.out)
}
)
## Do block bootstrapping manually (just to see how it could be done)
system.time({
# resample the data in blocks of length 100
resamples<-lapply(1:1000,function(i){
ns<-c(1,101,201,301,401,501,601,701,801,901)
newBlock<-sample(ns,10,replace=TRUE)
newBlock
newRows<-vector(mode="numeric", length=0)
for (i in 1:10){
nex100=seq(from=newBlock[i],to=newBlock[i]+99,by=1)
newRows<-c(newRows,nex100)
}
#str(newRows)
XyBlockResample<-Xy[newRows,];
})
#str(resamples)
# find beta1 for each block bootstrap sample
r.lfitBeta1 <- sapply(resamples, lfitBeta1)
summary(r.lfitBeta1)
# find standard deviation of distribution of beta1
sqrt(var(r.lfitBeta1))
# plot histogram and qq plot
par(mfrow=c(1,2))
hist(r.lfitBeta1)
qqnorm(r.lfitBeta1)
qqline(r.lfitBeta1, col = 2,lwd=2,lty=2)
})
system.time(
{
ns<-c(1,101,201,301,401,501,601,701,801,901)
lfitBeta1.fn=function(data,ns){
newBlock<-sample(ns,10,replace=TRUE)
newRows<-vector(mode="numeric", length=0)
for (i in 1:10){
nex100=seq(from=newBlock[i],to=newBlock[i]+99,by=1)
newRows<-c(newRows,nex100)
}
lfitBeta1(data[newRows,])
}
boot.out=boot(Xy,lfitBeta1.fn,R=10000)
boot.out
plot(boot.out)
}
)
## Do block bootstrapping manually (just to see how it could be done)
system.time({
# resample the data in blocks of length 100
resamples<-lapply(1:1000,function(i){
ns<-c(1,101,201,301,401,501,601,701,801,901)
newBlock<-sample(ns,10,replace=TRUE)
newBlock
newRows<-vector(mode="numeric", length=0)
for (i in 1:10){
nex100=seq(from=newBlock[i],to=newBlock[i]+99,by=1)
newRows<-c(newRows,nex100)
}
#str(newRows)
XyBlockResample<-Xy[newRows,];
})
#str(resamples)
# find beta1 for each block bootstrap sample
r.lfitBeta1 <- sapply(resamples, lfitBeta1)
summary(r.lfitBeta1)
# find standard deviation of distribution of beta1
sqrt(var(r.lfitBeta1))
# plot histogram and qq plot
par(mfrow=c(1,2))
hist(r.lfitBeta1)
qqnorm(r.lfitBeta1)
qqline(r.lfitBeta1, col = 2,lwd=2,lty=2)
})
system.time(
{
ns<-c(1,101,201,301,401,501,601,701,801,901)
lfitBeta1.fn=function(data,ns){
newBlock<-sample(ns,10,replace=TRUE)
newRows<-vector(mode="numeric", length=0)
for (i in 1:10){
nex100=seq(from=newBlock[i],to=newBlock[i]+99,by=1)
newRows<-c(newRows,nex100)
}
lfitBeta1(data[newRows,])
}
boot.out=boot(Xy,lfitBeta1.fn,R=1000)
boot.out
plot(boot.out)
}
)
## Do block bootstrapping manually (just to see how it could be done)
system.time({
# resample the data in blocks of length 100
resamples<-lapply(1:1000,function(i){
ns<-c(1,101,201,301,401,501,601,701,801,901)
newBlock<-sample(ns,10,replace=TRUE)
newBlock
newRows<-vector(mode="numeric", length=0)
for (i in 1:10){
nex100=seq(from=newBlock[i],to=newBlock[i]+99,by=1)
newRows<-c(newRows,nex100)
}
#str(newRows)
XyBlockResample<-Xy[newRows,];
})
#str(resamples)
# find beta1 for each block bootstrap sample
r.lfitBeta1 <- sapply(resamples, lfitBeta1)
summary(r.lfitBeta1)
# find standard deviation of distribution of beta1
sqrt(var(r.lfitBeta1))
# plot histogram and qq plot
par(mfrow=c(1,2))
hist(r.lfitBeta1)
qqnorm(r.lfitBeta1)
qqline(r.lfitBeta1, col = 2,lwd=2,lty=2)
})
